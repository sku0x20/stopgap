import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'application'
}

repositories {
    mavenCentral()
}

group = "com.example.stopgap"
version = "1.0-SNAPSHOT"

ext {
    helidonVersion = '4.2.7'
    junitVersion = "6.0.0-RC3"
}

dependencies {
    implementation("io.helidon.webserver:helidon-webserver:${helidonVersion}")
    implementation("io.helidon.config:helidon-config-yaml:${helidonVersion}")

    testImplementation("org.assertj:assertj-core:3.27.3")
    testImplementation("org.mockito:mockito-core:5.20.0")

    testImplementation("io.helidon.webserver.testing.junit5:helidon-webserver-testing-junit5:${helidonVersion}")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(25)
    }
}

application {
    mainClass = "com.example.stopgap.Main"
}

tasks.register('copyLibs', Copy) {
    from(configurations.named("runtimeClasspath"))
    into("build/libs/libs")
}

jar {
    archiveFileName.set("${project.name}.jar")
    manifest {
        attributes(
            "Main-Class": "${application.mainClass.get()}",
            "Class-Path": configurations.named("runtimeClasspath").get().collect { "libs/${it.name}" }.join(" ")
        )
    }
    dependsOn(tasks.named("copyLibs"))
}

testing {
    //noinspection GroovyAssignabilityCheck
    suites {
        test {
            useJUnitJupiter(junitVersion)
        }
        //noinspection GroovyAssignabilityCheck
        integrationTest(JvmTestSuite) {
            useJUnitJupiter(junitVersion)
            sources {
                compileClasspath += sourceSets.main.output
                runtimeClasspath += sourceSets.main.output
            }
            configurations {
                integrationTestImplementation.extendsFrom(testImplementation)
                integrationTestRuntimeOnly.extendsFrom(testRuntimeOnly)
            }
        }
    }
}

testing.suites.configureEach {
    targets.configureEach {
        testTask.configure {
            testLogging {
                events(TestLogEvent.STANDARD_ERROR)
                exceptionFormat = TestExceptionFormat.FULL
            }
        }
    }
}
